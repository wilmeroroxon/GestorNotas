
	

Universidad Mariano Gálvez								
Facultad: Ingeniería en Sistemas de Información y Ciencias de Computación
Curso: Algoritmos
Docente: Ing. Miguel Catalán






Manual Técnico
Gestor de Notas




						


Nombre: Wilmer Missael González Oroxón
						Carnet: 7590-25-282
						Sección: A
						Fecha: 13/10/2025


El Gestor de Notas, es un proyecto de Python que permite llevar un control básico sobre cursos académicos y notas. Permite agregar nuevos registros cursos, la edición, eliminación, ordenamientos de 2 formas, por notas y por nombres, incluyendo una simulación de revisión, todo a través de una línea de comandos. Todos los datos están guardados en una sola lista, también se utiliza una lista llamada historial para guardar cambios.
Estructura General
El proyecto consta de un solo archivo Proyecto_gestor_de_notas.py, la cual está estructurado de la siguiente manera:
•	Declaración de variables globales: la lista de los cursos y el historial.
•	Definición de Funciones y procedimientos que se agrupan de la siguiente manera:
o	Registro y gestión de cursos: nuevo_curso(), mostrar_lista().
o	Estadística: promedio_general(), cursos_aprobados().
o	Búsqueda: buscar_curso(), mostrar_busqueda(), búsqueda_binaria por_nombre.
o	Modificación de cursos: actualizar_nota(), eliminar_curso().
o	Ordenamiento: ordenamiento_por_nota(), ordenamiento_por_nombre(). 
o	Simulación de solicitudes: solicitud_de revision().
o	Historial de cambios: mostrar_historial().
•	Declaración de una variable string que contiene el menú para mostrar al usuario.
•	Bucle principal del programa que se encarga solicitar la opción que desea hacer el programa, valida si hay cursos, llama a las funciones o procedimientos, y controla las repeticiones y salidas.

Uso de listas pilas colas 
Listas: Es principalmente utilizada de manera global para guardar los cursos, y cada elemento de esta lista incluye: nombre del curso, nota, y estado (aprobado o reprobado), también se utiliza una lista para guardar el historial de cambios cuando se modifica una nota o se elimina algún curso, además una lista es utilizada en algunas funciones en donde es necesario buscar algún curso(ej. buscar_curso()), la lista se usa para que almacene los cursos que coincidan con la búsqueda.
Pilas: Pila es utilizada en la función de mostrar historial por que almacena los cambios hechos, y muestra de primero el ultimo cambio realizado.
Cola: Es utilizada en la simulación de revisión de solicitudes, conforme se ingrese el nombre de los cursos se estará revisando, el primero que se escribe, es el primero que se revisa.
Justificación de los algoritmos de ordenamiento
Ordenamiento por burbuja: Se utiliza en el ordenamiento por nota, la cual ordena las los cursos por nota de mayor a menor, este algoritmo trabajo muy bien con listas pequeñas, y siendo este un gestor de notas, se espera que no contenga una lista grande.
Ordenamiento por inserción: Es utilizado en el ordenamiento por nombres, ordenándolos alfabéticamente, este algoritmo se ha implementado porque es muy adecuado para lista casi ordenadas y pequeñas, 
Documentación de cada función y procedimiento
nuevo_curso(nombre, nota) : Esta función recibe 2 parámetros que son el nombre y la nota, y evalúa la nota si es mayor o igual a 60 para crear el dato de aprobado o reprobado, y retorna una pequeña lista de tres elementos, nombre del curso, nota, aprobado.
mostrar_lista(lista): este procedimiento recibe como parámetro una lista(en este gestor se utilizan listas que en cada elemento incluyen, nombre del curso, nota, estado) la cual se recorre para desempaquetar los elementos y luego imprime el nombre del curso, nota y estado.
promedio_general(lista): Esta función recorreré la lista global de cursos y suma cada una de las notas, para luego dividirlas en el número total de cursos registrados y también redondear el resultado a dos decimales.
cursos_aprobados(lista): Hace el recorrido de la lista de los cursos, para contar los estados aprobados y reprobados y retornar el conteo en dos variables.
buscar_curso(lista, búsqueda): recibe un dato a buscar que se normaliza a minúscula, y la lista de cursos, esta función es un algoritmo de búsqueda lineal, en donde recorre cada elemento y compara el dato a buscar, para luego añadir las coincidencias en una lista llamada encontrados. La función permite realizar búsquedas parciales, y al final retorna la lista de encontrados.
mostrar_busqueda(lista, búsqueda): este procedimiento completa la función buscar curso porque recibe de igual manera el dato a buscar y una lista, pero la diferencia es que la lista que recibe la lista de encontrados, y luego imprime cada uno de los cursos, o bien, si la lista está vacía mostrará un mensaje indicando que no se encontraron coincidencias.
actualizar_nota(lista, nueva_nota): en esta función se asigna la nueva nota al índice 1 del curso(es donde esta la nota), y además también se modifica el estado (aprobado o reprobado) y al final guarda el cambio en la lista del historial.
eliminar_curso(lista_cursos, búsqueda): esta función permite eliminar un curso si el usuario lo confirma. Primero realiza una búsqueda lineal para poder encontrar coincidencias y si hay mas de una, la eliminación se hará del primer resultado. También se registrará la eliminación en el historial. En consola mostrará los resultados de la búsqueda y pedirá confirmación al usuario para la eliminación, y al final muestra el resultado del proceso.
ordenamiento_por_nota(lista): en este ordenamiento se utiliza el ordenamiento por burbuja, y va comparando la nota de cada uno de los cursos para ordenarlos de mayor a menor.
ordenamiento_por_nombre(lista): ordena todos los cursos por nombre (en orden alfabético), se utiliza el ordenamiento por inserción.
busqueda_binario_por_nombre(lista,busqueda): esta función recibe como parámetro el dato o elemento a buscar y la lista, utiliza el algoritmo de busqueda binaria, en la que en cada comparación divide la lista en la mitad hasta llegar a la coincidencia.
solicitud_de_revision(): esta función pide al usuario nombre de cursos y los va almacenando en una cola (lista llamada solicitudes). Y termina de pedirlos cuando el usuario escriba fin, luego imprime las solicitudes conforme fueron añadidas. Y si no hay solicitudes, muestra un mensaje indicándolo. Esta es únicamente una simulación.
mostrar_historial(): imprime cada cambio realizado de actualización de nota o eliminación de curso, mostrando una pila, ultimo que entro es el primero que muestra. Si no hay cambios muestra un mensaje indicándolo.





